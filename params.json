{"google":"","body":"#Haskellmode-vim\r\n\r\nThis is a clone of Claus Reinke's wonderfull [haskellmode](http://projects.haskell.org/haskellmode-vim)\r\nI originally created it to allow for easier handling of my vundle based vim configuration.\r\nThe repository should correspond to the original darcs repository found here: http://code.haskell.org/haskellmode-vim\r\n\r\nConversion from darcs to git using [darcs-to-git](https://github.com/purcell/darcs-to-git)\r\n\r\n#documentation\r\n\r\n*haskellmode.txt*\tHaskell Mode Plugins\t02/05/2009\r\n\r\nAuthors:\r\n    Claus Reinke <claus.reinke@talk21.com> ~\r\n\r\nHomepage:\r\n    http://projects.haskell.org/haskellmode-vim\r\n\r\nCONTENTS                                                         *haskellmode*\r\n\r\n    1. Overview                                     |haskellmode-overview|\r\n        1.1 Runtime Requirements                    |haskellmode-requirements|\r\n        1.2 Quick Reference                         |haskellmode-quickref|\r\n    2. Settings                                     |haskellmode-settings|\r\n      2.1 GHC and web browser                       |haskellmode-settings-main|\r\n      2.2 Fine tuning - more configuration options  |haskellmode-settings-fine|\r\n    3. GHC Compiler Integration                     |haskellmode-compiler|\r\n    4. Haddock Integration                          |haskellmode-haddock|\r\n        4.1 Indexing                                |haskellmode-indexing|\r\n        4.2 Lookup                                  |haskellmode-lookup|\r\n        4.3 Editing                                 |haskellmode-editing|\r\n    5. Hpaste Integration                           |haskellmode-hpaste|\r\n    6. Additional Resources                         |haskellmode-resources|\r\n\r\n==============================================================================\r\n                                                        *haskellmode-overview*\r\n1. Overview ~\r\n\r\n    The Haskell mode plugins provide advanced support for Haskell development\r\n    using GHC/GHCi on Windows and Unix-like systems. The functionality is\r\n    based on Haddock-generated library indices, on GHCi's interactive\r\n    commands, or on simply activating (some of) Vim's built-in program editing\r\n    support in Haskell-relevant fashion. These plugins live side-by-side with\r\n    the pre-defined |syntax-highlighting| support for |haskell| sources, and\r\n    any other Haskell-related plugins you might want to install (see\r\n    |haskellmode-resources|).\r\n\r\n    The Haskell mode plugins consist of three filetype plugins (haskell.vim,\r\n    haskell_doc.vim, haskell_hpaste.vim), which by Vim's |filetype| detection\r\n    mechanism will be auto-loaded whenever files with the extension '.hs' are\r\n    opened, and one compiler plugin (ghc.vim) which you will need to load from\r\n    your vimrc file (see |haskellmode-settings|).\r\n\r\n\r\n                                                    *haskellmode-requirements*\r\n1.1 Runtime Requirements ~\r\n\r\n    The plugins require a recent installation of GHC/GHCi. The functionality\r\n    derived from Haddock-generated library indices also requires a local\r\n    installation of the Haddock documentation for GHC's libraries (if there is\r\n    no documentation package for your system, you can download a tar-ball from\r\n    haskell.org), as well as an HTML browser (see |haddock_browser|). If you \r\n    want to use the experimental hpaste interface, you will also need Wget.\r\n\r\n    * GHC/GHCi ~\r\n      Provides core functionality. http://www.haskell.org/ghc\r\n\r\n    * HTML library documentation files and indices generated by Haddock ~\r\n      These usually come with your GHC installation, possibly as a separate\r\n      package. If you cannot get them this way, you can download a tar-ball\r\n      matching your GHC version from  http://www.haskell.org/ghc/docs/\r\n\r\n    * HTML browser with basic CSS support ~\r\n      For browsing Haddock docs.\r\n\r\n    * Wget ~\r\n      For interfacing with http://hpaste.org.\r\n\r\n      Wget is widely available for modern Unix-like operating systems. Several\r\n      ports also exist for Windows, including:\r\n\r\n      - Official GNU Wget (natively compiled for Win32)\r\n        http://www.gnu.org/software/wget/#downloading\r\n\r\n      - UnxUtils Wget (natively compiled for Win32, bundled with other ported\r\n        Unix utilities)\r\n        http://sourceforge.net/projects/unxutils/\r\n\r\n      - Cygwin Wget (emulated POSIX in Win32, must be run under Cygwin)\r\n        http://cygwin.com/packages/wget/\r\n\r\n                                                    *haskellmode-quickref*\r\n1.2 Quick Reference ~\r\n\r\n|:make|               load into GHCi, show errors (|quickfix| |:copen|)\r\n|_ct|                 create |tags| file \r\n|_si|                 show info for id under cursor\r\n|_t|                  show type for id under cursor\r\n|_T|                  insert type declaration for id under cursor\r\n|balloon|             show type for id under mouse pointer\r\n|_?|                  browse Haddock entry for id under cursor\r\n|_?1|                 search Hoogle for id under cursor\r\n|_?2|                 search Hayoo! for id under cursor\r\n|:IDoc| {identifier}  browse Haddock entry for unqualified {identifier}\r\n|:MDoc| {module}      browse Haddock entry for {module}\r\n|:FlagReference| {s}  browse Users Guide Flag Reference for section {s}\r\n|_.|                  qualify unqualified id under cursor\r\n|_i|                  add 'import <module>(<identifier>)' for id under cursor\r\n|_im|                 add 'import <module>' for id under cursor\r\n|_iq|                 add 'import qualified <module>(<identifier>)' for id under cursor\r\n|_iqm|                add 'import qualified <module>' for id under cursor\r\n|_ie|                 make imports explit for import statement under cursor\r\n|_opt|                add OPTIONS_GHC pragma\r\n|_lang|               add LANGUAGE pragma\r\n|i_CTRL-X_CTRL-O|     insert-mode completion based on imported ids (|haskellmode-XO|)\r\n|i_CTRL-X_CTRL-U|     insert-mode completion based on documented ids (|haskellmode-XU|)\r\n|i_CTRL-N|            insert-mode completion based on imported sources\r\n|:GHCi|{command/expr} run GHCi command/expr in current module\r\n\r\n|:GHCStaticOptions|   edit static GHC options for this buffer\r\n|:DocSettings|        show current Haddock-files-related plugin settings\r\n|:DocIndex|           populate Haddock index \r\n|:ExportDocIndex|     cache current Haddock index to a file\r\n|:HpasteIndex|        Read index of most recent entries from hpaste.org\r\n|:HpastePostNew|      Submit current buffer as a new hpaste \r\n\r\n\r\n==============================================================================\r\n                                                        *haskellmode-settings*\r\n2. Settings ~\r\n\r\n    The plugins try to find their dependencies in standard locations, so if\r\n    you're lucky, you will only need to set |compiler| to ghc, and configure\r\n    the location of your favourite web browser. You will also want to make\r\n    sure that |filetype| detection and |syntax| highlighting are on. Given the\r\n    variety of things to guess, however, some dependencies might not be found\r\n    correctly, or the defaults might not be to your liking, in which case you\r\n    can do some more fine tuning. All of this configuration should happen in\r\n    your |vimrc|.\r\n>\r\n        \" enable syntax highlighting\r\n        syntax on\r\n \r\n        \" enable filetype detection and plugin loading\r\n        filetype plugin on\r\n<\r\n\r\n                                                   *haskellmode-settings-main*\r\n2.1 GHC and web browser ~\r\n\r\n                                                 *compiler-ghc* *ghc-compiler*\r\n    To use the features provided by the GHC |compiler| plugin, use the\r\n    following |autocommand| in your vimrc:\r\n>\r\n        au BufEnter *.hs compiler ghc\r\n<\r\n                                                                       *g:ghc*\r\n    If the compiler plugin can't locate your GHC binary, or if you have\r\n    several versions of GHC installed and have a preference as to which binary\r\n    is used, set |g:ghc|:\r\n>\r\n        :let g:ghc=\"/usr/bin/ghc-6.6.1\"\r\n<\r\n                                                           *g:haddock_browser*\r\n    The preferred HTML browser for viewing Haddock documentation can be set as\r\n    follows:\r\n>\r\n        :let g:haddock_browser=\"/usr/bin/firefox\"\r\n<\r\n\r\n                                                   *haskellmode-settings-fine*\r\n2.2 Fine tuning - more configuration options ~\r\n\r\n    Most of the fine tuning is likely to happen for the haskellmode_doc.vim\r\n    plugin, so you can check the current settings for this plugin via the\r\n    command |:DocSettings|. If all the settings reported there are to your\r\n    liking, you probably won't need to do any fine tuning.\r\n\r\n                                                *g:haddock_browser_callformat*\r\n    By default, the web browser|g:haddock_browser| will be started\r\n    asynchronously (in the background) on Windows or when vim is running in a\r\n    GUI, and synchronously (in the foreground) otherwise. These settings seem\r\n    to work fine if you are using a console mode browser (eg, when editing in\r\n    a remote session), or if you are starting a GUI browser that will launch\r\n    itself in the background. But if these settings do not work for you, you\r\n    can change the default browser launching behavior.\r\n\r\n    This is controlled by |g:haddock_browser_callformat|. It specifies a\r\n    format string which uses two '%s' parameters, the first representing the\r\n    path of the browser to launch, and the second is the documentation URL\r\n    (minus the protocol specifier, i.e. file://) passed to it by the Haddock\r\n    plugin.  For instance, to launch a GUI browser on Unix-like systems and\r\n    force it to the background (see also |shellredir|):\r\n>\r\n        :let g:haddock_browser_callformat = '%s file://%s '.printf(&shellredir,'/dev/null').' &'\r\n<\r\n                                                            *g:haddock_docdir*\r\n    Your system's installed Haddock documentation for GHC and its libraries\r\n    should be automatically detected. If the plugin can't locate them, you\r\n    must point |g:haddock_docdir| to the path containing the master index.html\r\n    file for the subdirectories 'libraries', 'Cabal', 'users_guide', etc.:\r\n>\r\n        :let g:haddock_docdir=\"/usr/local/share/doc/ghc/html/\"\r\n<\r\n                                                      *g:haddock_indexfiledir*\r\n    The information gathered from Haddock's index files will be stored in a\r\n    file called 'haddock_index.vim' in a directory derived from the Haddock\r\n    location, or in $HOME. To configure another directory for the index file,\r\n    use: \r\n>\r\n        :let g:haddock_indexfiledir=\"~/.vim/\"\r\n<\r\n                                                                      *g:wget*\r\n    If you also want to try the experimental hpaste functionality, you might\r\n    you need to set |g:wget| before the |hpaste| plugin is loaded (unless wget\r\n    is in your PATH):\r\n>\r\n        :let g:wget=\"C:\\Program Files\\wget\\wget.exe\"\r\n<\r\n\r\n    Finally, the mappings actually use|<LocalLeader>|behind the scenes, so if\r\n    you have to, you can redefine|maplocalleader|to something other than '_'.\r\n    Just remember that the docs still refer to mappings starting with '_', to\r\n    avoid confusing the majority of users!-)\r\n\r\n==============================================================================\r\n                                                  *haskellmode-compiler* *ghc*\r\n3. GHC Compiler Integration ~\r\n\r\n    The GHC |compiler| plugin sets the basic |errorformat| and |makeprg| to\r\n    enable |quickfix| mode using GHCi, and provides functionality for show\r\n    info (|_si|), show type (|_t| or mouse |balloon|), add type declaration\r\n    (|_T|), create tag file (|_ct|), and insert-mode completion\r\n    (|i_CTRL-X_CTRL-O|) based on GHCi browsing of the current and imported\r\n    modules. \r\n\r\n    To avoid frequent calls to GHCi, type information is cached in Vim. The\r\n    cache will be populated the first time a command depends on it, and will\r\n    be refreshed every time a |:make| goes through without generating errors\r\n    (if the |:make| does not succeed, the old types will remain available in\r\n    Vim).  You can also unconditionally force reloading of type info using\r\n    |:GHCReload| (if GHCi cannot load your file, the type info will be empty).\r\n\r\n\r\n    In addition to the standard|quickfix| commands, the GHC compiler plugin\r\n    provides:\r\n\r\n                                                                  *:GHCReload*\r\n:GHCReload              Reload modules and unconditionally refresh cache of\r\n                        type info. Usually, |:make| is prefered, as that will\r\n                        refresh the cache only if GHCi reports no errors, and\r\n                        show the errors otherwise.\r\n\r\n                                                           *:GHCStaticOptions*\r\n:GHCStaticOptions       Edit the static GHC options (more generally, options\r\n                        that cannot be set by in-file OPTIONS_GHC pragmas)\r\n                        for the current buffer. Useful for adding hidden \r\n                        packages (-package ghc), or additional import paths\r\n                        (-isrc; you will then also want to augment |path|).\r\n                        If you have static options you want to set as\r\n                        defaults, you could use b:ghc_staticoptions, eg:\r\n>\r\n                        au FileType haskell let b:ghc_staticoptions = '-isrc'\r\n                        au FileType haskell setlocal path += src\r\n<\r\n\r\n                                                                       *:GHCi*\r\n:GHCi {command/expr}    Run GHCi commands/expressions in the current module.                  \r\n\r\n                                                                         *_ct*\r\n_ct                     Create |tags| file for the current Haskell source\r\n                        file. This uses GHCi's :ctags command, so it will work\r\n                        recursively, but will only list tags for exported\r\n                        entities.\r\n\r\n                                                                        *_opt*\r\n_opt                    Shows a menu of frequently used GHC compiler options \r\n                        (selecting an entry adds the option as a pragma to the\r\n                        start of the file). Uses popup menu (GUI) or :emenu\r\n                        and command-line completion (CLI).\r\n\r\n                                                                       *_lang*\r\n_lang                   Shows a menu of the LANGUAGE options supported by GHC\r\n                        (selecting an entry adds the language as a pragma to \r\n                        the start of the file). Uses popup menu (GUI) or\r\n                        :emenu and command-line completion (CLI).\r\n\r\n                                                                         *_si*\r\n_si                     Show extended information for the name under the\r\n                        cursor. Uses GHCi's :info command. Output appears in\r\n                        |preview-window| (when done, close with |:pclose|).\r\n\r\n                                                                          *_t*\r\n_t                      Show type for the name under the cursor. Uses cached\r\n                        info from GHCi's :browse command.\r\n\r\n                                                                          *_T*\r\n_T                      Insert type declaration for the name under the cursor.\r\n                        Uses cached info from GHCi's :browse command.\r\n\r\n                                *haskellmode-XO* *haskellmode-omni-completion*\r\nCTRL-X CTRL-O           Standard insert-mode omni-completion based on the\r\n                        cached type info from GHCi browsing current and\r\n                        imported modules. Only names from the current and from\r\n                        imported modules are included (the completion menu\r\n                        also show the type of each identifier).\r\n\r\n==============================================================================\r\n                                               *haskellmode-haddock* *haddock*\r\n4. Haddock Integration ~\r\n\r\n    Haskell mode integrates with Haddock-generated HTML documentation,\r\n    providing features such as navigating to the Haddock entry for the\r\n    identifier under the cursor (|_?|), completion for the identifier under\r\n    the cursor (|i_CTRL-X_CTRL-U|), and adding import statements (|_i| |_im|\r\n    |_iq| |_iqm|) or module qualifier (|_.|) for the identifier under the\r\n    cursor.\r\n\r\n    These commands operate on an internal Haddock index built from the\r\n    platform's installed Haddock documentation for GHC's libraries. Since\r\n    populating this index takes several seconds, it should be stored as a \r\n    file called 'haddock_index.vim' in the directory specified by\r\n    |g:haddock_indexfiledir|.\r\n\r\n    Some commands present a different interface (popup menu or command-line\r\n    completion) according to whether the current Vim instance is graphical or\r\n    console-based (actually: whether or not the GUI is running). Such\r\n    differences are marked below with the annotations (GUI) and (CLI),\r\n    respectively.\r\n\r\n    |:DocSettings| shows the settings for this plugin. If you are happy with\r\n    them, you can call |:ExportDocIndex| to populate and write out the\r\n    documentation index (should be called once for every new version of GHC).\r\n\r\n                                                                *:DocSettings*\r\n:DocSettings            Show current Haddock-files-related plugin settings.\r\n\r\n\r\n                                                        *haskellmode-indexing*\r\n4.1 Indexing ~\r\n\r\n                                                                   *:DocIndex*\r\n:DocIndex               Populate the Haddock index from the GHC library\r\n                        documentation.\r\n\r\n                                                             *:ExportDocIndex*\r\n:ExportDocIndex         Cache the current Haddock index to a file (populate\r\n                        index first, if empty).\r\n\r\n\r\n                                                          *haskellmode-lookup*\r\n4.2 Lookup ~\r\n\r\n                                                                          *_?*\r\n_?                      Open the Haddock entry (in |haddock_browser|) for an\r\n                        identifier under the cursor, selecting full\r\n                        qualifications from a popup menu (GUI) or via\r\n                        command-line completion (CLI), if the identifier is\r\n                        not qualified.\r\n\r\n                                                                         *_?1*\r\n_?1                     Search Hoogle (using |haddock_browser|) for an\r\n                        identifier under the cursor.\r\n\r\n\r\n                                                                         *_?2*\r\n_?2                     Search Hayoo! (using |haddock_browser|) for an\r\n                        identifier under the cursor.\r\n\r\n                                                                       *:IDoc*\r\n:IDoc {identifier}      Open the Haddock entry for the unqualified\r\n                        {identifier} in |haddock_browser|, suggesting possible\r\n                        full qualifications.\r\n\r\n                                                                       *:MDoc*\r\n:MDoc {module}          Open the Haddock entry for {module} in\r\n                        |haddock_browser| (with command-line completion for\r\n                        the fully qualified module name).\r\n\r\n                                                              *:FlagReference*\r\n:FlagReference {s}      Browse Users Guide Flag Reference for section {s}\r\n                        (with command-line completion for section headers).\r\n\r\n\r\n                                                         *haskellmode-editing*\r\n4.3 Editing ~\r\n\r\n                                                                          *_.*\r\n_.                      Fully qualify the unqualified name under the cursor\r\n                        selecting full qualifications from a popup menu (GUI)\r\n                        or via command-line completion (CLI).\r\n\r\n                                                                    *_iq* *_i*\r\n_i _iq                  Add 'import [qualified] <module>(<identifier>)'\r\n                        statement for the identifier under the cursor,\r\n                        selecting fully qualified modules from a popup menu\r\n                        (GUI) or via command-line completion (CLI), if the\r\n                        identifier is not qualified.  This currently adds one\r\n                        import statement per call instead of merging into\r\n                        existing import statements.\r\n\r\n                                                                  *_iqm* *_im*\r\n_im                     Add 'import [qualified] <module>' statement for the\r\n                        identifier under the cursor, selecting fully qualified\r\n                        modules from a popup menu (GUI) or via command-line\r\n                        completion (CLI), if the identifier is not qualified.\r\n                        This currently adds one import statement per call\r\n                        instead of merging into existing import statements.\r\n\r\n                                                                         *_ie*\r\n_ie                     On an 'import <module>' line, in a correctly loadable\r\n                        module, temporarily comment out import and use :make\r\n                        'not in scope' errors to explicitly list imported\r\n                        identifiers.\r\n\r\n                                *haskellmode-XU* *haskellmode-user-completion*\r\nCTRL-X CTRL-U           User-defined insert mode name completion based on all\r\n                        names known to the Haddock index, including package\r\n                        names. Completions are presented in a popup menu which\r\n                        also displays the fully qualified module from which\r\n                        each entry may be imported. \r\n\r\n                        CamelCode shortcuts are supported, meaning that\r\n                        lower-case letters can be elided, using only\r\n                        upper-case letters and module qualifier separators (.)\r\n                        for disambiguation:\r\n\r\n                          pSL    -> putStrLn\r\n                          C.E.t  -> Control.Exception.t\r\n                          C.M.MP -> Control.Monad.MonadPlus\r\n\r\n                        To reduce unwanted matches, the first letter of such\r\n                        shortcuts and the first letter after each '.' have to\r\n                        match directly.\r\n\r\n==============================================================================\r\n                                                 *haskellmode-hpaste* *hpaste*\r\n5. Hpaste Integration ~\r\n\r\n    This experimental feature allows browsing and posting to\r\n    http://hpaste.org, a Web-based pastebin tailored for Haskell code.\r\n\r\n\r\n                                                                *:HpasteIndex*\r\n:HpasteIndex            Read the most recent entries from hpaste.org. Show an\r\n                        index of the entries in a new buffer, where ',r' will\r\n                        open the current highlighted entry [and ',p' will\r\n                        annotate it with the current buffer].\r\n\r\n                                                              *:HpastePostNew*\r\n:HpastePostNew          Submit current buffer as a new hpaste entry.\r\n                        [This, and ',p' above, are temporarily disabled, \r\n                         needs update to new hpaste.org layout]\r\n\r\n==============================================================================\r\n                                                       *haskellmode-resources*\r\n6. Additional Resources ~\r\n\r\n    An quick screencast tour through of these plugins is available at:\r\n\r\n    http://projects.haskell.org/haskellmode-vim/screencasts.html\r\n\r\n    Other Haskell-related Vim plugins can be found here:\r\n\r\n    http://www.haskell.org/haskellwiki/Libraries_and_tools/Program_development#Vim\r\n\r\n    Make sure to read about Vim's other program-editing features in its online\r\n    |user-manual|. Also have a look at Vim tips and plugins at www.vim.org -\r\n    two other plugins I tend to use when editing Haskell are AlignPlugin.vim\r\n    (to line up regexps for definitions, keywords, comments, etc. in\r\n    consecutive lines) and surround.vim (to surround text with quotes,\r\n    brackets, parentheses, comments, etc.).\r\n\r\n==============================================================================\r\n vim:tw=78:ts=8:ft=help:\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"clone of Claus Reinkes http://projects.haskell.org/haskellmode-vim","name":"Haskellmode-vim"}